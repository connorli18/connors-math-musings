<div class='section'>Gradient Descent</div><div class='subsection'>The Problem Statement</div>Imagine we have some function $f(x,y)$ and we want to demonstrate how to do gradient descent given some starting value $(a,b)$ and step size $\alpha$. The problem is fairly generic, but we will provide a more in-depth solution and example to showcase how this method works.<div class='subsection'>Finding the Gradient</div>First, let's find the gradient $\nabla f(x,y) = \langle f_x, f_y \rangle$.<div class='subsection'>Gradient Descent Script (Python)</div>For the next few iterations, I have used a Python script to do the iterative calculations. Below is the commented script that repeats the example iteration where we map $(a,b) \mapsto \left(a - \alpha f_x(a,b), b - \alpha f_y(a,b)\right)$ and round to the thousandth's place. <br><br>First, we add our calculated gradient functions as $f_x, f_y$ respectively.<div class="center-it"><code class="lstlisting" style="text-decoration: none !important; color: white !important;">&nbsp;&nbsp;&nbsp;&nbsp;import&nbsp;math<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;calculated&nbsp;f_x&nbsp;from&nbsp;gradient<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;f_x(a:&nbsp;float,&nbsp;b:&nbsp;float)&nbsp;-&gt;&nbsp;float:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;fill&nbsp;in&nbsp;with&nbsp;function!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;calculated&nbsp;f_y&nbsp;from&nbsp;gradient<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;f_y(a:&nbsp;float,&nbsp;b:&nbsp;float)&nbsp;-&gt;&nbsp;float:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;fill&nbsp;in&nbsp;with&nbsp;function!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass<br><br></code></div>Then, we define a function that represents one iteration of the gradient descent using the problem from the example.<div class="center-it"><code class="lstlisting" style="text-decoration: none !important; color: white !important;">&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;grad_descent_one_step(starting_point:&nbsp;tuple,&nbsp;f_x,&nbsp;f_y,&nbsp;alpha:&nbsp;float):<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;starting_point&nbsp;(a,b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;starting_point[0]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;=&nbsp;starting_point[1]<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;calculates&nbsp;f_x(a,b)&nbsp;and&nbsp;f_y(a,b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grad_x&nbsp;=&nbsp;f_x(a=a,&nbsp;b=b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grad_y&nbsp;=&nbsp;f_y(a=a,&nbsp;b=b)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;calculates&nbsp;the&nbsp;next&nbsp;&quot;step&quot;&nbsp;-&nbsp;rounded&nbsp;to&nbsp;3&nbsp;decimals<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_output&nbsp;=&nbsp;round(a&nbsp;-&nbsp;alpha&nbsp;*&nbsp;grad_x,&nbsp;3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b_output&nbsp;=&nbsp;round(b&nbsp;-&nbsp;alpha&nbsp;*&nbsp;grad_y,&nbsp;3)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;outputs&nbsp;the&nbsp;&quot;next&nbsp;step&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(a_output,&nbsp;b_output)<br></code></div>Since we are generally interested in two types of "gradient descent," we define two functions.<div class="itemize"><ul><li> Set Iterations: We only run a set number of iterations!<li> Stabilizing: We keep iterating until there is less than a $3$-decimal difference between iterative results.</ul></div><div class="center-it"><code class="lstlisting" style="text-decoration: none !important; color: white !important;">&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;for&nbsp;a&nbsp;set&nbsp;number&nbsp;of&nbsp;iterations<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;set_iterations_grad_descent(starting_point:&nbsp;tuple,&nbsp;f_x,&nbsp;f_y,&nbsp;alpha:&nbsp;float,&nbsp;num_iterations:&nbsp;int):<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_a&nbsp;=&nbsp;starting_point[0]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_b&nbsp;=&nbsp;starting_point[1]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f&quot;Starting:&nbsp;{(start_a,&nbsp;start_b)}&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;keep&nbsp;iterating&nbsp;num_iterations&nbsp;times<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(num_iterations):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_a,&nbsp;new_b&nbsp;=&nbsp;grad_descent_one_step(starting_point,&nbsp;f_x,&nbsp;f_y,&nbsp;alpha)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f&quot;Iteration&nbsp;{i+1}:&nbsp;{(new_a,&nbsp;new_b)}&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;reset&nbsp;your&nbsp;starting!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_a&nbsp;=&nbsp;new_a<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_b&nbsp;=&nbsp;new_b<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(new_a,&nbsp;new_b)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;for&nbsp;no&nbsp;set&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;stabilizing_grad_descent(starting_point:&nbsp;tuple,&nbsp;f_x,&nbsp;f_y,&nbsp;alpha:&nbsp;float):<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_a&nbsp;=&nbsp;starting_point[0]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_b&nbsp;=&nbsp;starting_point[1]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f&quot;Starting:&nbsp;{(start_a,&nbsp;start_b)}&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;=&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;keep&nbsp;iterating&nbsp;until&nbsp;you&nbsp;hit&nbsp;the&nbsp;break&nbsp;condition!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;True:<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_a,&nbsp;new_b&nbsp;=&nbsp;grad_descent_one_step((start_a,&nbsp;start_b),&nbsp;f_x,&nbsp;f_y,&nbsp;alpha)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;+=&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f&quot;Iteration&nbsp;{count}:&nbsp;{(new_a,&nbsp;new_b)}&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;three&nbsp;decimal&nbsp;precision<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;abs(start_a&nbsp;-&nbsp;new_a)&nbsp;&lt;&nbsp;0.001&nbsp;and&nbsp;abs(start_b&nbsp;-&nbsp;new_b)&nbsp;&lt;&nbsp;0.001:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(count,&nbsp;(new_a,&nbsp;new_b))<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;reset&nbsp;the&nbsp;values&nbsp;to&nbsp;start&nbsp;the&nbsp;next&nbsp;cycle<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_a&nbsp;=&nbsp;new_a<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_b&nbsp;=&nbsp;new_b<br></code></div>Finally, we just print the results nicely so that we can apply this to specific problems regarding gradient descent.<div class="center-it"><code class="lstlisting" style="text-decoration: none !important; color: white !important;">&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;__name__&nbsp;==&nbsp;&quot;__main__&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;starting&nbsp;point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;starting_point&nbsp;=&nbsp;(0,&nbsp;0)<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;question&nbsp;2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;-----------------Problem&nbsp;Solution----------------&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_start&nbsp;=&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stabilizing_grad_descent(starting_point,&nbsp;f_x,&nbsp;f_y,&nbsp;alpha_start)<br><br></code></div>